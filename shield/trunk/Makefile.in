# Makefile for Shield
#
# Author: Axel Liljencrantz
# Copyright: FreeCode AS
# License: GPLv2 or later

#
# Programs used by make
#
CXX := @CXX@
CC := @CC@
INSTALL := @INSTALL@

#
# Flags for different programs
#
CXXFLAGS := @CXXFLAGS@
CFLAGS := @CFLAGS@
CPPFLAGS := @CPPFLAGS@ -I.
LDFLAGS := @LDFLAGS@ -ll -locci -lclntsh -lpthread -lnnz10

#
# Various build directories. Do not build in source directory.
#
BIN_DIR := bin
OBJ_DIR := obj
SRC_DIR := src

#
# All the different object files that need to be generated
#
INTROSPECTION_OBJS := $(OBJ_DIR)/introspection_table.o		\
$(OBJ_DIR)/introspection.o $(OBJ_DIR)/introspection_column.o	\
$(OBJ_DIR)/introspection_column_type.o

EXCEPTION_OBJS := $(OBJ_DIR)/exception_unsupported.o			\
$(OBJ_DIR)/exception.o $(OBJ_DIR)/cplus-dem.o $(OBJ_DIR)/cp-demangle.o	\
$(OBJ_DIR)/dyn-string.o

DATABASE_OBJS := $(OBJ_DIR)/database.o					\
$(OBJ_DIR)/database_result_set.o $(OBJ_DIR)/database_parameter.o

TRANSFORM_OBJS := $(OBJ_DIR)/transform_common.o				\
$(OBJ_DIR)/transform_yacc.o $(OBJ_DIR)/transform_lex_wrapper.o		\
$(OBJ_DIR)/transform_printable.o $(OBJ_DIR)/transform_select.o		\
$(OBJ_DIR)/transform_identity.o $(OBJ_DIR)/transform_text.o		\
$(OBJ_DIR)/transform_create_table.o $(OBJ_DIR)/transform_insert.o	\
$(OBJ_DIR)/transform_auto_increment.o					\
$(OBJ_DIR)/transform_create_index.o $(OBJ_DIR)/transform_drop_table.o	\
$(OBJ_DIR)/transform_function.o $(OBJ_DIR)/transform_interval.o		\
$(OBJ_DIR)/transform_query.o $(OBJ_DIR)/transform_print_package.o	\
$(OBJ_DIR)/transform_chain.o $(OBJ_DIR)/transform_comparison.o		\
$(OBJ_DIR)/transform_cast.o $(OBJ_DIR)/transform_update.o		\
$(OBJ_DIR)/transform_fake_query.o $(OBJ_DIR)/transform_type.o

CATALYST_OBJS := $(OBJ_DIR)/catalyst.o					\
$(OBJ_DIR)/catalyst_create_identity.o $(OBJ_DIR)/catalyst_find_table.o	\
$(OBJ_DIR)/catalyst_internal.o						\
$(OBJ_DIR)/catalyst_replace_identifier.o				\
$(OBJ_DIR)/catalyst_validation.o

#
# Listings of which object files are needed by which programs
#
SHIELD_OBJS := $(OBJ_DIR)/shield.o $(TRANSFORM_OBJS)		\
$(INTROSPECTION_OBJS) $(DATABASE_OBJS) $(OBJ_DIR)/util.o	\
$(EXCEPTION_OBJS) $(CATALYST_OBJS) $(OBJ_DIR)/logger.o $(OBJ_DIR)/enum_char.o

TRANSFORM_LEX_TEST_OBJS := $(OBJ_DIR)/transform_lex_test.o	\
$(OBJ_DIR)/transform_lex_wrapper.o

INTROSPECTION_TEST_OBJS := $(OBJ_DIR)/introspection_test.o	\
$(INTROSPECTION_OBJS) $(DATABASE_OBJS) $(OBJ_DIR)/util.o	\
$(EXCEPTION_OBJS)

DATABASE_TEST_OBJS := $(OBJ_DIR)/database_test.o $(DATABASE_OBJS)	\
$(OBJ_DIR)/util.o $(EXCEPTION_OBJS)

ALL_OBJS := $(TRANSFORM_OBJS) $(INTROSPECTION_OBJS) $(DATABASE_OBJS)	\
$(EXCEPTION_OBJS) $(EXCEPTION_OBJS) $(CATALYST_OBJS)			\
$(OBJ_DIR)/shield.o $(OBJ_DIR)/util.o $(OBJ_DIR)/transform_lex_test.o	\
$(OBJ_DIR)/introspection_test.o $(OBJ_DIR)/database_test.o

ALL_SRCS := $(subst $(OBJ_DIR)/,$(SRC_DIR)/,$(ALL_OBJS:.o=.cc))
ALL_DEPS := $(ALL_OBJS:.o=.d)

#
# Listing of all programs that this Makefile can build
#
PROGRAMS := $(BIN_DIR)/shield $(BIN_DIR)/transform_lex_test	\
$(BIN_DIR)/shield_make_package_string $(BIN_DIR)/database_test	\
$(BIN_DIR)/introspection_test

#
# Default action
#
all: $(PROGRAMS)

#
# How to build all the programs
#
$(BIN_DIR)/shield: $(SHIELD_OBJS)
	$(CXX) $(SHIELD_OBJS) -o $@ $(LDFLAGS)

$(BIN_DIR)/shield_make_package_string: $(SRC_DIR)/shield_make_package_string.cc
	$(CXX) $(SRC_DIR)/shield_make_package_string.cc -o $@

$(BIN_DIR)/transform_lex_test: $(TRANSFORM_LEX_TEST_OBJS)
	$(CXX) $(TRANSFORM_LEX_TEST_OBJS) -o $@ $(LDFLAGS)

$(BIN_DIR)/introspection_test: $(INTROSPECTION_TEST_OBJS)
	$(CXX) $(INTROSPECTION_TEST_OBJS) -o $@ $(LDFLAGS)

$(BIN_DIR)/database_test: $(DATABASE_TEST_OBJS)
	$(CXX) $(DATABASE_TEST_OBJS) -o $@ $(LDFLAGS)

#
# How to generate the lexer/parser c sources
#
$(SRC_DIR)/transform_lex.cc: $(SRC_DIR)/transform_lex.y
	flex -i -o$(SRC_DIR)/transform_lex.cc $(SRC_DIR)/transform_lex.y 

$(SRC_DIR)/transform_yacc.cc: $(SRC_DIR)/transform_yacc.y
	bison -d $(SRC_DIR)/transform_yacc.y -o $(SRC_DIR)/transform_yacc.cc 

$(SRC_DIR)/transform_yacc.hh: $(SRC_DIR)/transform_yacc.cc

#
# How to convert the package definition into C++ code
#
$(SRC_DIR)/transform_print_package.cc: $(BIN_DIR)/shield_make_package_string shield_package.sql
	echo "#include \"transform.hh\"" >$@.tmp
	echo "void shield::transform::print_package ()" >>$@.tmp
	echo "{" >>$@.tmp
	echo -n "	cout << " >>$@.tmp
	./$(BIN_DIR)/shield_make_package_string < shield_package.sql >>$@.tmp
	echo ";" >>$@.tmp
	echo "}" >>$@.tmp
	mv $@.tmp $@

#
# These dependencies make sure that autoconf and configure are run
# when the source code for the build configuration has changed.
#

configure: configure.ac
	./config.status --recheck

Makefile: Makefile.in configure
	./config.status


#
# Update dependencies
#
depend: $(SRC_DIR)/transform_yacc.hh $(SRC_DIR)/transform_lex.cc
	makedepend -fMakefile.depend -Y $(SRC_DIR)/*.cc
.PHONY: depend

#
# Rule for making objects
#
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cc
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $(SRC_DIR)/$*.cc -o $@ 

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -c $(SRC_DIR)/$*.c -o $@ 

#
# Rule for making dependencies
#
$(OBJ_DIR)/%.d: $(SRC_DIR)/%.cc
	@if test ! -f $(SRC_DIR)/transform_lex.hh; then \
		flex -i -o$(SRC_DIR)/transform_lex.cc $(SRC_DIR)/transform_lex.y; \
	fi;\
	if test ! -f $(SRC_DIR)/transform_yacc.hh; then \
		bison -d $(SRC_DIR)/transform_yacc.y -o $(SRC_DIR)/transform_yacc.cc; \
	fi
	$(CXX) -MM -MG $(SRC_DIR)/$*.cc $(CPPFLAGS) | sed -e 's@^\(.*\)\.o:@'$(OBJ_DIR)'/\1.d '$(OBJ_DIR)'/\1.o:@' >$@

$(OBJ_DIR)/%.d: $(SRC_DIR)/%.c
	$(CC) -MM -MG $(SRC_DIR)/$*.cc $(CPPFLAGS) | sed -e 's@^\(.*\)\.o:@'$(OBJ_DIR)'/\1.d '$(OBJ_DIR)'/\1.o:@' >$@

#
# Include automatically generated dependencies (see depend target)
#

clean:
	rm -f $(OBJ_DIR)/*.o 
	rm -f $(OBJ_DIR)/*.d 
	rm -f $(SRC_DIR)/transform_yacc.cc $(SRC_DIR)/transform_yacc.hh 
	rm -f $(SRC_DIR)/transform_lex.cc $(SRC_DIR)/transform_lex.hh
	rm -f $(PROGRAMS)
	rm -f $(SRC_DIR)/transform_print_package.cc

include $(ALL_DEPS)
