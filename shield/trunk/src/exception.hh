/**
@file exception.hh

Various exceptions generated by different parts of shield. Only the
exception subclasses defined in this file are ever thrown by any
Shield code.

Note that the classes themselves, not pointers to the classes are
thrown. Catch statements should catch a reference to the
exception. That way, the exception will be deallocated at the end of
the catch clause with no explicit memory management.

@package Shield
@author Axel Liljencrantz

This file is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2 or later.

*/

#ifndef EXCEPTION_HH
#define EXCEPTION_HH

#include <string>
#include <iostream>
#include <exception>

namespace shield
{

  namespace exception
  {

    using namespace std;

    class shield_exception
      : public std::exception
    {
    public:
      shield_exception ()
      {
      }
  
      virtual const char *what () const throw ()
      {
	return __what.c_str ();
      }

      virtual ~shield_exception () throw ()
      {
      }

    protected:
      void _set_what (const string &what)
      {
	__what = what;
      }

    private:
      string __what;

    }
    ;
    /**
       This exception is thrown when a a valid SQL query is entered, which shield can not handle because that functionality has yet to be implemented.

    */
    class unsupported
      : public shield_exception
    {
    public:
  
      unsupported (const string &file, int line);
  
    };

    /**
       This exception is thrown when the later stages of parsing encounter a problem in the supplied syntax.

       Earlier stages of parsing i.e. error in the bison grammar, are
       communicated using th yyerror function.
    */
    class syntax
      : public shield_exception
    {
    public:
  
      syntax (const string &err)
      {
	_set_what ("Syntax error: "+ err);
      }  
    };

    /**
       This exception is thrown when expected data was not present.

       This exception is often thrown when an AST node expected to
       have a child node of a specific type, but it was not present.
    */
    class not_found
      : public shield_exception
    {
    public:

      not_found (const string &not_found)
      {
	_set_what ("Could not find item '" + not_found + "'");
      }
    };

    /**
       This exception is thrown when data (usually an AST node) was of an unexpected class.
    */
    class invalid_type
      : public shield_exception
    {
    public:

      invalid_type (const string &where, const string &what)
      {
	_set_what ("Item in '" + where + "' was not of expected type '" + what + "'");
      }

    }
    ;

  }

}

#endif

